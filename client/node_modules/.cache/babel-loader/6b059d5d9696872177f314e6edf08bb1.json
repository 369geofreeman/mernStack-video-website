{"ast":null,"code":"var _jsxFileName = \"/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/navigation/Navigation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport HomePage from \"../containers/HomePage/HomePage\";\nimport CategoriesOverlay from \"../containers/CategoriesOverlay/CategoriesOverlay\";\nimport CategoryPlayer from \"../containers/CategoryPlayer/CategoryPlayer\";\nimport ProfilePage from \"../containers/ProfilePage/ProfilePage\";\nimport SavedVidsSlider from \"../components/ProfilePage/SavedVidsSliderModel/SavedVidsSlider\";\nimport ToggleSignIn from \"../components/LoginModal/RegisterForm/ToggleSignIn\";\nimport Modal from \"../components/LoginModal/Modal\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport PageLoadingLogo from \"../layout/PageLoadingLogo\";\n\nconst Navigation = ({\n  isAuthenticated: {\n    isAuthenticated,\n    user\n  },\n  videos: {\n    loading,\n    categoryLoading\n  }\n}) => {\n  let location = useLocation();\n  let background = location.state && location.state.background;\n  const [svid, setSVid] = useState([]); // Bring in user saved vids with useEffect and set in a useState or [] otherwise\n\n  useEffect(() => {\n    setSVid(user.savedVids);\n  }, [setSVid]);\n  let routes;\n\n  if (isAuthenticated) {\n    routes = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      location: location || background,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Redirect, {\n      from: \"/auth\",\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: loading === false && svid.length > 0 ? HomePage : PageLoadingLogo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/:vidId\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/categories/:categoryId/:vidId\",\n      component: categoryLoading === false ? CategoryPlayer : PageLoadingLogo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(PrivateRoute, {\n      path: \"/:userId/profile\",\n      component: ProfilePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(PrivateRoute, {\n      path: \"/saved/:vidId\",\n      component: SavedVidsSlider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), background && React.createElement(React.Fragment, null, React.createElement(PrivateRoute, {\n      exact: true,\n      path: \"/saved/:vidId\",\n      component: ProfilePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/categories\",\n      component: CategoriesOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })));\n  } else {\n    routes = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      location: location || background,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: loading === false ? HomePage : PageLoadingLogo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/:vidId\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/auth\",\n      component: ToggleSignIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/categories/:categoryId/:vidId\",\n      component: categoryLoading === false ? CategoryPlayer : PageLoadingLogo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), background && React.createElement(React.Fragment, null, React.createElement(Route, {\n      exact: true,\n      path: \"/auth\",\n      component: Modal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/categories\",\n      component: CategoriesOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })));\n  }\n\n  return routes;\n}; //  Redux\n\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.Authenticate,\n    videos: state.Videos\n  };\n};\n\nexport default connect(mapStateToProps)(Navigation); // import React from \"react\";\n// import { Switch, Route, useLocation, Redirect } from \"react-router-dom\";\n// import { connect } from \"react-redux\";\n// import HomePage from \"../containers/HomePage/HomePage\";\n// import CategoriesOverlay from \"../containers/CategoriesOverlay/CategoriesOverlay\";\n// import CategoryPlayer from \"../containers/CategoryPlayer/CategoryPlayer\";\n// import ProfilePage from \"../containers/ProfilePage/ProfilePage\";\n// import SavedVidsSlider from \"../components/ProfilePage/SavedVidsSliderModel/SavedVidsSlider\";\n// import ToggleSignIn from \"../components/LoginModal/RegisterForm/ToggleSignIn\";\n// import Modal from \"../components/LoginModal/Modal\";\n// import PrivateRoute from \"./PrivateRoute\";\n// import PageLoadingLogo from \"../layout/PageLoadingLogo\";\n// const Navigation = ({\n//   isAuthenticated: { isAuthenticated, user },\n//   videos: { loading, categoryLoading }\n// }) => {\n//   let location = useLocation();\n//   let background = location.state && location.state.background;\n//   let routes;\n//   if (isAuthenticated) {\n//     routes = (\n//       <div>\n//         <Switch location={location || background}>\n//           <Redirect from=\"/auth\" to=\"/\" />\n//           <Route\n//             exact\n//             path=\"/\"\n//             component={\n//               loading === false ? HomePage : PageLoadingLogo\n//             }\n//           />\n//           <Route exact path=\"/:vidId\" component={HomePage} />\n//           <Route\n//             path=\"/categories/:categoryId/:vidId\"\n//             component={\n//               categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n//             }\n//           />\n//           <PrivateRoute path=\"/:userId/profile\" component={ProfilePage} />\n//           <PrivateRoute path=\"/saved/:vidId\" component={SavedVidsSlider} />\n//         </Switch>\n//         {background && (\n//           <>\n//             <PrivateRoute exact path=\"/saved/:vidId\" component={ProfilePage} />\n//             <Route exact path=\"/categories\" component={CategoriesOverlay} />\n//           </>\n//         )}\n//       </div>\n//     );\n//   } else {\n//     routes = (\n//       <div>\n//         <Switch location={location || background}>\n//           <Route\n//             exact\n//             path=\"/\"\n//             component={loading === false ? HomePage : PageLoadingLogo}\n//           />\n//           <Route exact path=\"/:vidId\" component={HomePage} />\n//           <Route exact path=\"/auth\" component={ToggleSignIn} />\n//           <Route\n//             path=\"/categories/:categoryId/:vidId\"\n//             component={\n//               categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n//             }\n//           />\n//           <Redirect to=\"/\" />\n//         </Switch>\n//         {background && (\n//           <>\n//             <Route exact path=\"/auth\" component={Modal} />\n//             <Route exact path=\"/categories\" component={CategoriesOverlay} />\n//           </>\n//         )}\n//       </div>\n//     );\n//   }\n//   return routes;\n// };\n// //  Redux\n// const mapStateToProps = state => {\n//   return {\n//     isAuthenticated: state.Authenticate,\n//     videos: state.Videos\n//   };\n// };\n// export default connect(mapStateToProps)(Navigation);","map":{"version":3,"sources":["/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/navigation/Navigation.js"],"names":["React","useEffect","useState","Switch","Route","useLocation","Redirect","connect","HomePage","CategoriesOverlay","CategoryPlayer","ProfilePage","SavedVidsSlider","ToggleSignIn","Modal","PrivateRoute","PageLoadingLogo","Navigation","isAuthenticated","user","videos","loading","categoryLoading","location","background","state","svid","setSVid","savedVids","routes","length","mapStateToProps","Authenticate","Videos"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport HomePage from \"../containers/HomePage/HomePage\";\nimport CategoriesOverlay from \"../containers/CategoriesOverlay/CategoriesOverlay\";\nimport CategoryPlayer from \"../containers/CategoryPlayer/CategoryPlayer\";\nimport ProfilePage from \"../containers/ProfilePage/ProfilePage\";\nimport SavedVidsSlider from \"../components/ProfilePage/SavedVidsSliderModel/SavedVidsSlider\";\nimport ToggleSignIn from \"../components/LoginModal/RegisterForm/ToggleSignIn\";\nimport Modal from \"../components/LoginModal/Modal\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport PageLoadingLogo from \"../layout/PageLoadingLogo\";\n\nconst Navigation = ({\n  isAuthenticated: { isAuthenticated, user },\n  videos: { loading, categoryLoading }\n}) => {\n  let location = useLocation();\n  let background = location.state && location.state.background;\n\n  const [svid, setSVid] = useState([]);\n  // Bring in user saved vids with useEffect and set in a useState or [] otherwise\n  useEffect(() => {\n    setSVid(user.savedVids);\n  }, [setSVid]);\n\n  let routes;\n\n  if (isAuthenticated) {\n    routes = (\n      <div>\n        <Switch location={location || background}>\n          <Redirect from=\"/auth\" to=\"/\" />\n          <Route\n            exact\n            path=\"/\"\n            component={\n              loading === false && svid.length > 0 ? HomePage : PageLoadingLogo\n            }\n          />\n          <Route exact path=\"/:vidId\" component={HomePage} />\n          <Route\n            path=\"/categories/:categoryId/:vidId\"\n            component={\n              categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n            }\n          />\n          <PrivateRoute path=\"/:userId/profile\" component={ProfilePage} />\n          <PrivateRoute path=\"/saved/:vidId\" component={SavedVidsSlider} />\n        </Switch>\n        {background && (\n          <>\n            <PrivateRoute exact path=\"/saved/:vidId\" component={ProfilePage} />\n            <Route exact path=\"/categories\" component={CategoriesOverlay} />\n          </>\n        )}\n      </div>\n    );\n  } else {\n    routes = (\n      <div>\n        <Switch location={location || background}>\n          <Route\n            exact\n            path=\"/\"\n            component={loading === false ? HomePage : PageLoadingLogo}\n          />\n          <Route exact path=\"/:vidId\" component={HomePage} />\n          <Route exact path=\"/auth\" component={ToggleSignIn} />\n          <Route\n            path=\"/categories/:categoryId/:vidId\"\n            component={\n              categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n            }\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n        {background && (\n          <>\n            <Route exact path=\"/auth\" component={Modal} />\n            <Route exact path=\"/categories\" component={CategoriesOverlay} />\n          </>\n        )}\n      </div>\n    );\n  }\n\n  return routes;\n};\n\n//  Redux\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.Authenticate,\n    videos: state.Videos\n  };\n};\n\nexport default connect(mapStateToProps)(Navigation);\n\n// import React from \"react\";\n// import { Switch, Route, useLocation, Redirect } from \"react-router-dom\";\n// import { connect } from \"react-redux\";\n\n// import HomePage from \"../containers/HomePage/HomePage\";\n// import CategoriesOverlay from \"../containers/CategoriesOverlay/CategoriesOverlay\";\n// import CategoryPlayer from \"../containers/CategoryPlayer/CategoryPlayer\";\n// import ProfilePage from \"../containers/ProfilePage/ProfilePage\";\n// import SavedVidsSlider from \"../components/ProfilePage/SavedVidsSliderModel/SavedVidsSlider\";\n// import ToggleSignIn from \"../components/LoginModal/RegisterForm/ToggleSignIn\";\n// import Modal from \"../components/LoginModal/Modal\";\n// import PrivateRoute from \"./PrivateRoute\";\n// import PageLoadingLogo from \"../layout/PageLoadingLogo\";\n\n// const Navigation = ({\n//   isAuthenticated: { isAuthenticated, user },\n//   videos: { loading, categoryLoading }\n// }) => {\n//   let location = useLocation();\n//   let background = location.state && location.state.background;\n\n//   let routes;\n\n//   if (isAuthenticated) {\n//     routes = (\n//       <div>\n//         <Switch location={location || background}>\n//           <Redirect from=\"/auth\" to=\"/\" />\n//           <Route\n//             exact\n//             path=\"/\"\n//             component={\n//               loading === false ? HomePage : PageLoadingLogo\n//             }\n//           />\n//           <Route exact path=\"/:vidId\" component={HomePage} />\n//           <Route\n//             path=\"/categories/:categoryId/:vidId\"\n//             component={\n//               categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n//             }\n//           />\n//           <PrivateRoute path=\"/:userId/profile\" component={ProfilePage} />\n//           <PrivateRoute path=\"/saved/:vidId\" component={SavedVidsSlider} />\n//         </Switch>\n//         {background && (\n//           <>\n//             <PrivateRoute exact path=\"/saved/:vidId\" component={ProfilePage} />\n//             <Route exact path=\"/categories\" component={CategoriesOverlay} />\n//           </>\n//         )}\n//       </div>\n//     );\n//   } else {\n//     routes = (\n//       <div>\n//         <Switch location={location || background}>\n//           <Route\n//             exact\n//             path=\"/\"\n//             component={loading === false ? HomePage : PageLoadingLogo}\n//           />\n//           <Route exact path=\"/:vidId\" component={HomePage} />\n//           <Route exact path=\"/auth\" component={ToggleSignIn} />\n//           <Route\n//             path=\"/categories/:categoryId/:vidId\"\n//             component={\n//               categoryLoading === false ? CategoryPlayer : PageLoadingLogo\n//             }\n//           />\n//           <Redirect to=\"/\" />\n//         </Switch>\n//         {background && (\n//           <>\n//             <Route exact path=\"/auth\" component={Modal} />\n//             <Route exact path=\"/categories\" component={CategoriesOverlay} />\n//           </>\n//         )}\n//       </div>\n//     );\n//   }\n\n//   return routes;\n// };\n\n// //  Redux\n// const mapStateToProps = state => {\n//   return {\n//     isAuthenticated: state.Authenticate,\n//     videos: state.Videos\n//   };\n// };\n\n// export default connect(mapStateToProps)(Navigation);\n"]},"metadata":{},"sourceType":"module"}