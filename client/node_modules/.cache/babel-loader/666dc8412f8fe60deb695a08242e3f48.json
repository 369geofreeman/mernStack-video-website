{"ast":null,"code":"import axios from \"axios\";\nimport { GET_VIDEOS, VIDEOS_ERROR, ADD_SAVED_VID, REMOVE_SAVED_VID, PROFILE_ERROR, GET_CATEGORY_VIDEOS, RESET_CATEGORY_VIDEOS } from \"./ActionTypes\";\nimport { setAlert } from \"./Index\"; // Add saved Video into users array\n\nexport const addSavedVid = savedVid => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    await axios.put(\"/api/users/savevid\", savedVid, config);\n    dispatch({\n      type: ADD_SAVED_VID,\n      payload: savedVid\n    }); // dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete saved video from users array\n\nexport const delSavedVid = _id => async dispatch => {\n  try {\n    await axios.delete(`/api/users/savevid/${_id}`);\n    dispatch({\n      type: REMOVE_SAVED_VID,\n      payload: _id\n    }); // dispatch(setAlert(\"Clip removed\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all main videos\n\nexport const getSelectedVideos = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/videos\");\n    dispatch({\n      type: GET_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //  Get videos by category\n\nexport const getCategoryVideos = category => async dispatch => {\n  try {\n    const res = await axios.get(`/api/categories/${category}`);\n    dispatch({\n      type: GET_CATEGORY_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Reset the videos loaded into category state\n\nexport const resetCategoryVideos = () => dispatch => {\n  dispatch({\n    type: RESET_CATEGORY_VIDEOS\n  });\n};","map":{"version":3,"sources":["/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/store/actions/Videos.js"],"names":["axios","GET_VIDEOS","VIDEOS_ERROR","ADD_SAVED_VID","REMOVE_SAVED_VID","PROFILE_ERROR","GET_CATEGORY_VIDEOS","RESET_CATEGORY_VIDEOS","setAlert","addSavedVid","savedVid","dispatch","config","headers","put","type","payload","err","errors","response","data","forEach","error","msg","playload","statusText","status","delSavedVid","_id","delete","getSelectedVideos","res","get","getCategoryVideos","category","resetCategoryVideos"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,UADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,gBAJF,EAKEC,aALF,EAMEC,mBANF,EAOEC,qBAPF,QAQO,eARP;AASA,SAASC,QAAT,QAAyB,SAAzB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc,MAAOC,QAAP,IAAoB;AAC3D,MAAI;AACF,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMb,KAAK,CAACc,GAAN,CAAU,oBAAV,EAAgCJ,QAAhC,EAA0CE,MAA1C,CAAN;AACAD,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEZ,aADC;AAEPa,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR,CARE,CAaF;AACD,GAdD,CAcE,OAAOO,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBF,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAWX,QAAQ,CAACH,QAAQ,CAACc,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDZ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,aADC;AAEPmB,MAAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAEN,GAAG,CAACE,QAAJ,CAAaM,UAApB;AAAgCC,QAAAA,MAAM,EAAET,GAAG,CAACE,QAAJ,CAAaO;AAArD;AAFH,KAAD,CAAR;AAID;AACF,CA1BM,C,CA4BP;;AACA,OAAO,MAAMC,WAAW,GAAIC,GAAD,IAAS,MAAOjB,QAAP,IAAoB;AACtD,MAAI;AACF,UAAMX,KAAK,CAAC6B,MAAN,CAAc,sBAAqBD,GAAI,EAAvC,CAAN;AAEAjB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,gBADC;AAEPY,MAAAA,OAAO,EAAEY;AAFF,KAAD,CAAR,CAHE,CAQF;AACD,GATD,CASE,OAAOX,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBF,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAWX,QAAQ,CAACH,QAAQ,CAACc,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDZ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,aADC;AAEPmB,MAAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAEN,GAAG,CAACE,QAAJ,CAAaM,UAApB;AAAgCC,QAAAA,MAAM,EAAET,GAAG,CAACE,QAAJ,CAAaO;AAArD;AAFH,KAAD,CAAR;AAID;AACF,CArBM,C,CAuBP;;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAM,MAAOnB,QAAP,IAAoB;AACzD,MAAI;AACF,UAAMoB,GAAG,GAAG,MAAM/B,KAAK,CAACgC,GAAN,CAAU,aAAV,CAAlB;AAEArB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEd,UADC;AAEPe,MAAAA,OAAO,EAAEe,GAAG,CAACX;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOH,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEb,YADC;AAEPsB,MAAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAEN,GAAG,CAACE,QAAJ,CAAaM,UAApB;AAAgCC,QAAAA,MAAM,EAAET,GAAG,CAACE,QAAJ,CAAaO;AAArD;AAFH,KAAD,CAAR;AAID;AACF,CAdM,C,CAgBP;;AACA,OAAO,MAAMO,iBAAiB,GAAIC,QAAD,IAAc,MAAOvB,QAAP,IAAoB;AACjE,MAAI;AACF,UAAMoB,GAAG,GAAG,MAAM/B,KAAK,CAACgC,GAAN,CAAW,mBAAkBE,QAAS,EAAtC,CAAlB;AAEAvB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,mBADC;AAEPU,MAAAA,OAAO,EAAEe,GAAG,CAACX;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOH,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEb,YADC;AAEPsB,MAAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAEN,GAAG,CAACE,QAAJ,CAAaM,UAApB;AAAgCC,QAAAA,MAAM,EAAET,GAAG,CAACE,QAAJ,CAAaO;AAArD;AAFH,KAAD,CAAR;AAID;AACF,CAdM,C,CAgBP;;AACA,OAAO,MAAMS,mBAAmB,GAAG,MAAOxB,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAER;AADC,GAAD,CAAR;AAGD,CAJM","sourcesContent":["import axios from \"axios\";\n\nimport {\n  GET_VIDEOS,\n  VIDEOS_ERROR,\n  ADD_SAVED_VID,\n  REMOVE_SAVED_VID,\n  PROFILE_ERROR,\n  GET_CATEGORY_VIDEOS,\n  RESET_CATEGORY_VIDEOS,\n} from \"./ActionTypes\";\nimport { setAlert } from \"./Index\";\n\n// Add saved Video into users array\nexport const addSavedVid = (savedVid) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    await axios.put(\"/api/users/savevid\", savedVid, config);\n    dispatch({\n      type: ADD_SAVED_VID,\n      payload: savedVid,\n    });\n\n    // dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete saved video from users array\nexport const delSavedVid = (_id) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/users/savevid/${_id}`);\n\n    dispatch({\n      type: REMOVE_SAVED_VID,\n      payload: _id,\n    });\n\n    // dispatch(setAlert(\"Clip removed\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get all main videos\nexport const getSelectedVideos = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/api/videos\");\n\n    dispatch({\n      type: GET_VIDEOS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//  Get videos by category\nexport const getCategoryVideos = (category) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/categories/${category}`);\n\n    dispatch({\n      type: GET_CATEGORY_VIDEOS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Reset the videos loaded into category state\nexport const resetCategoryVideos = () => (dispatch) => {\n  dispatch({\n    type: RESET_CATEGORY_VIDEOS,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}