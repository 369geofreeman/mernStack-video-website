{"ast":null,"code":"var _jsxFileName = \"/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/components/LoginModal/RegisterForm/SignInForm/SignInForm.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\"; // redux\n\nimport { login, setAlert } from \"../../../../store/actions/Index\"; // components\n\nimport Alert from \"../../../../layout/Alert/Alert\";\nimport PageLoadingLogo from \"../../../../layout/PageLoadingLogo\";\nimport \"./SignInForm.scss\";\n\nconst SignInForm = ({\n  login,\n  setAlert\n}) => {\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    forgottenEmail: \"\"\n  });\n  const [passwordResetForm, setPasswordResetForm] = useState(false);\n  const {\n    email,\n    password,\n    forgottenEmail\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    await login(email, password);\n  };\n\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    await setEmailLoading(true);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    let body = await JSON.stringify({\n      email: forgottenEmail\n    });\n\n    try {\n      await axios.post(\"/api/auth/forgot_password\", body, config);\n      setAlert(`Email sent to: ${forgottenEmail}`, \"success\");\n      setFormData({ ...formData,\n        forgottenEmail: \"\"\n      });\n      await setEmailLoading(false);\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => setAlert(error.msg, \"danger\"));\n        await setEmailLoading(false);\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"registerFormContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, !passwordResetForm ? React.createElement(\"form\", {\n    onSubmit: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"registerFormEmail\",\n    type: \"email\",\n    placeholder: \"Email Address\",\n    name: \"email\",\n    value: email,\n    onChange: e => onChange(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"registerFormEmail\",\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    minLength: \"6\",\n    value: password,\n    onChange: e => onChange(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => setPasswordResetForm(!passwordResetForm),\n    className: \"forgotPasswordText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Forgot your password?\"), React.createElement(Alert, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"formBtnContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Login\",\n    className: \"submitBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: e => handlePasswordReset(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, emailLoading ? React.createElement(Lottie, {\n    options: defaultOptions // height={400}\n    // width={400}\n    ,\n    ref: animation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, \" \", React.createElement(\"input\", {\n    className: \"registerFormEmail\",\n    type: \"email\",\n    placeholder: \"Email\",\n    name: \"forgottenEmail\",\n    value: forgottenEmail,\n    onChange: e => onChange(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => setPasswordResetForm(!passwordResetForm),\n    className: \"forgotPasswordText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Back to sign in\"), React.createElement(Alert, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"formBtnContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Reset Password\",\n    className: \"submitBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))))));\n}; //  Redux\n\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.Authenticate.isAuthenticated\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  setAlert\n})(SignInForm);","map":{"version":3,"sources":["/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/components/LoginModal/RegisterForm/SignInForm/SignInForm.js"],"names":["React","useState","axios","connect","login","setAlert","Alert","PageLoadingLogo","SignInForm","emailLoading","setEmailLoading","formData","setFormData","email","password","forgottenEmail","passwordResetForm","setPasswordResetForm","onChange","e","target","name","value","onSubmit","preventDefault","handlePasswordReset","config","headers","body","JSON","stringify","post","err","errors","response","data","forEach","error","msg","defaultOptions","animation","mapStateToProps","state","isAuthenticated","Authenticate"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n// redux\nimport { login, setAlert } from \"../../../../store/actions/Index\";\n// components\nimport Alert from \"../../../../layout/Alert/Alert\";\nimport PageLoadingLogo from \"../../../../layout/PageLoadingLogo\";\nimport \"./SignInForm.scss\";\n\nconst SignInForm = ({ login, setAlert }) => {\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    forgottenEmail: \"\",\n  });\n  const [passwordResetForm, setPasswordResetForm] = useState(false);\n\n  const { email, password, forgottenEmail } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    await login(email, password);\n  };\n\n  const handlePasswordReset = async (e) => {\n    e.preventDefault();\n    await setEmailLoading(true);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    let body = await JSON.stringify({ email: forgottenEmail });\n    try {\n      await axios.post(\"/api/auth/forgot_password\", body, config);\n      setAlert(`Email sent to: ${forgottenEmail}`, \"success\");\n      setFormData({ ...formData, forgottenEmail: \"\" });\n      await setEmailLoading(false);\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => setAlert(error.msg, \"danger\"));\n        await setEmailLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"registerFormContainer\">\n      {!passwordResetForm ? (\n        <form onSubmit={(e) => onSubmit(e)}>\n          <div>\n            <input\n              className=\"registerFormEmail\"\n              type=\"email\"\n              placeholder=\"Email Address\"\n              name=\"email\"\n              value={email}\n              onChange={(e) => onChange(e)}\n              required\n            />\n          </div>\n          <div>\n            <input\n              className=\"registerFormEmail\"\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              minLength=\"6\"\n              value={password}\n              onChange={(e) => onChange(e)}\n              required\n            />\n            <div\n              onClick={() => setPasswordResetForm(!passwordResetForm)}\n              className=\"forgotPasswordText\"\n            >\n              Forgot your password?\n            </div>\n            <Alert />\n          </div>\n          <div className=\"formBtnContainer\">\n            <input type=\"submit\" value=\"Login\" className=\"submitBtn\" />\n          </div>\n        </form>\n      ) : (\n        <div>\n          <form onSubmit={(e) => handlePasswordReset(e)}>\n            {emailLoading ? (\n              <Lottie\n                options={defaultOptions}\n                // height={400}\n                // width={400}\n                ref={animation}\n              />\n            ) : (\n              <>\n                {\" \"}\n                <input\n                  className=\"registerFormEmail\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  name=\"forgottenEmail\"\n                  value={forgottenEmail}\n                  onChange={(e) => onChange(e)}\n                  required\n                />\n                <div\n                  onClick={() => setPasswordResetForm(!passwordResetForm)}\n                  className=\"forgotPasswordText\"\n                >\n                  Back to sign in\n                </div>\n                <Alert />\n                <div className=\"formBtnContainer\">\n                  <input\n                    type=\"submit\"\n                    value=\"Reset Password\"\n                    className=\"submitBtn\"\n                  />\n                </div>\n              </>\n            )}\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\n//  Redux\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.Authenticate.isAuthenticated,\n  };\n};\n\nexport default connect(mapStateToProps, { login, setAlert })(SignInForm);\n"]},"metadata":{},"sourceType":"module"}