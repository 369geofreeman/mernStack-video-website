{"ast":null,"code":"var _jsxFileName = \"/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/components/ResetPassword/ResetPassword.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Redux\n\nimport { setAlert } from \"../../store/actions/Index\"; // Comoponets\n\nimport Alert from \"../../layout/Alert/Alert\";\nimport PageLoadingLogo from \"../../layout/PageLoadingLogo\";\nimport \"./ResetPassword.css\";\n\nconst ResetPassword = ({\n  match\n}) => {\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    password: \"\",\n    passwordMatch: \"\"\n  });\n  const {\n    password,\n    passwordMatch\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    await setEmailLoading(true);\n    e.preventDefault();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (password === passwordMatch) {\n      let body = await JSON.stringify({\n        password: password,\n        token: match.params.token\n      });\n\n      try {\n        await axios.post(\"/api/auth/reset_password/:token\", body, config);\n        await setFormData({ ...formData,\n          password: \"\",\n          passwordMatch: \"\"\n        });\n        await setAlert(`Password updated`, \"success\");\n        setEmailLoading(false);\n      } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n          errors.forEach(error => setAlert(error.msg, \"danger\"));\n        }\n      }\n\n      setEmailLoading(false);\n    } else {\n      setAlert(`Passwords do not match`, \"danger\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"resetFormPageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: e => onSubmit(e),\n    className: \"accountPasswordPageFormContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"passwordPageTitleText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Enter your new password below\"), React.createElement(Alert, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), emailLoading ? React.createElement(PageLoadingLogo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, \" \", React.createElement(\"input\", {\n    type: \"password\",\n    title: \"Enter new password\",\n    value: password,\n    onChange: e => onChange(e),\n    name: \"password\",\n    className: \"accountPasswordPageFormInput\",\n    placeholder: \"New Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    title: \"Re-enter new password\",\n    value: passwordMatch,\n    onChange: e => onChange(e),\n    name: \"passwordMatch\",\n    className: \"accountPasswordPageFormInput\",\n    placeholder: \"Re-enter New Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"resetPasswordPageBtn\",\n    title: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/components/ResetPassword/ResetPassword.js"],"names":["React","useState","axios","setAlert","Alert","PageLoadingLogo","ResetPassword","match","emailLoading","setEmailLoading","formData","setFormData","password","passwordMatch","onChange","e","target","name","value","onSubmit","preventDefault","config","headers","body","JSON","stringify","token","params","post","err","errors","response","data","forEach","error","msg"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n// Redux\nimport { setAlert } from \"../../store/actions/Index\";\n// Comoponets\nimport Alert from \"../../layout/Alert/Alert\";\nimport PageLoadingLogo from \"../../layout/PageLoadingLogo\";\nimport \"./ResetPassword.css\";\n\nconst ResetPassword = ({ match }) => {\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    password: \"\",\n    passwordMatch: \"\",\n  });\n  const { password, passwordMatch } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    await setEmailLoading(true);\n    e.preventDefault();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    if (password === passwordMatch) {\n      let body = await JSON.stringify({\n        password: password,\n        token: match.params.token,\n      });\n      try {\n        await axios.post(\"/api/auth/reset_password/:token\", body, config);\n        await setFormData({ ...formData, password: \"\", passwordMatch: \"\" });\n        await setAlert(`Password updated`, \"success\");\n        setEmailLoading(false);\n      } catch (err) {\n        const errors = err.response.data.errors;\n        if (errors) {\n          errors.forEach((error) => setAlert(error.msg, \"danger\"));\n        }\n      }\n      setEmailLoading(false);\n    } else {\n      setAlert(`Passwords do not match`, \"danger\");\n    }\n  };\n\n  return (\n    <div className=\"resetFormPageContainer\">\n      <form\n        onSubmit={(e) => onSubmit(e)}\n        className=\"accountPasswordPageFormContainer\"\n      >\n        <h2 className=\"passwordPageTitleText\">Enter your new password below</h2>\n        <Alert />\n        {emailLoading ? (\n          <PageLoadingLogo />\n        ) : (\n          <>\n            {\" \"}\n            <input\n              type=\"password\"\n              title=\"Enter new password\"\n              value={password}\n              onChange={(e) => onChange(e)}\n              name=\"password\"\n              className=\"accountPasswordPageFormInput\"\n              placeholder=\"New Password\"\n            />\n            <input\n              type=\"password\"\n              title=\"Re-enter new password\"\n              value={passwordMatch}\n              onChange={(e) => onChange(e)}\n              name=\"passwordMatch\"\n              className=\"accountPasswordPageFormInput\"\n              placeholder=\"Re-enter New Password\"\n            />\n            <input\n              type=\"submit\"\n              className=\"resetPasswordPageBtn\"\n              title=\"Submit\"\n            />\n          </>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}