{"ast":null,"code":"import axios from \"axios\";\nimport { GET_VIDEOS, VIDEOS_ERROR, ADD_SAVED_VID, REMOVE_SAVED_VID, PROFILE_ERROR, GET_CATEGORY_VIDEOS, RESET_CATEGORY_VIDEOS } from \"./ActionTypes\";\nimport { setAlert } from \"./Index\"; // Add saved Video into users array\n\nexport const addSavedVid = savedVid => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const res = await axios.put(\"/api/users/savevid\", savedVid, config);\n    console.log(res.data);\n    dispatch({\n      type: ADD_SAVED_VID,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete saved video from users array\n\nexport const delSavedVid = _id => async dispatch => {\n  try {\n    await axios.delete(`/api/users/savevid/${_id}`);\n    dispatch({\n      type: REMOVE_SAVED_VID,\n      payload: _id\n    });\n    dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all main videos\n\nexport const getSelectedVideos = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/videos\");\n    dispatch({\n      type: GET_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //  Get videos by category\n\nexport const getCategoryVideos = category => async dispatch => {\n  try {\n    const res = await axios.get(`/api/categories/${category}`);\n    dispatch({\n      type: GET_CATEGORY_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const resetCategoryVideos = () => dispatch => {\n  dispatch({\n    type: RESET_CATEGORY_VIDEOS\n  });\n};","map":{"version":3,"sources":["/Users/joshuastevenson/Desktop/Websites/xhkd/client/src/store/actions/Videos.js"],"names":["axios","GET_VIDEOS","VIDEOS_ERROR","ADD_SAVED_VID","REMOVE_SAVED_VID","PROFILE_ERROR","GET_CATEGORY_VIDEOS","RESET_CATEGORY_VIDEOS","setAlert","addSavedVid","savedVid","dispatch","config","headers","res","put","console","log","data","type","payload","err","errors","response","forEach","error","msg","playload","statusText","status","delSavedVid","_id","delete","getSelectedVideos","get","getCategoryVideos","category","resetCategoryVideos"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport {\n  GET_VIDEOS,\n  VIDEOS_ERROR,\n  ADD_SAVED_VID,\n  REMOVE_SAVED_VID,\n  PROFILE_ERROR,\n  GET_CATEGORY_VIDEOS,\n  RESET_CATEGORY_VIDEOS\n} from \"./ActionTypes\";\nimport { setAlert } from \"./Index\";\n\n// Add saved Video into users array\nexport const addSavedVid = savedVid => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n\n    const res = await axios.put(\"/api/users/savevid\", savedVid, config);\n    console.log(res.data);\n    dispatch({\n      type: ADD_SAVED_VID,\n      payload: res.data\n    });\n\n    dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete saved video from users array\nexport const delSavedVid = _id => async dispatch => {\n  try {\n    await axios.delete(`/api/users/savevid/${_id}`);\n    dispatch({\n      type: REMOVE_SAVED_VID,\n      payload: _id\n    });\n\n    dispatch(setAlert(\"Clip saved\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get all main videos\nexport const getSelectedVideos = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/videos\");\n\n    dispatch({\n      type: GET_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n//  Get videos by category\nexport const getCategoryVideos = category => async dispatch => {\n  try {\n    const res = await axios.get(`/api/categories/${category}`);\n\n    dispatch({\n      type: GET_CATEGORY_VIDEOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEOS_ERROR,\n      playload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const resetCategoryVideos = () => dispatch => {\n  dispatch({\n    type: RESET_CATEGORY_VIDEOS\n  });\n};\n"]},"metadata":{},"sourceType":"module"}